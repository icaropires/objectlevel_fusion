#!/bin/bash

help_() {
  echo \
"This is a simple CLI with the most default commands to help running the object-level fusion.
Despite most of the underneath commands being run using Docker, it's a specially useful script for people who don't know how to use Docker.

Usage: ./$(basename $0) [up|down|build|compile|status|shell|tests|clean|tests_no_tty|help]

Commands:
  up         Starts the application.
  down       Bring the application down. More useful when starting the application in background or for cleaning.
  build      Builds the applications containers.
  compile    Recompiles from source code without the need to call 'build' again. Requires that the application is NOT running.
  status     To check the status of the application containers
  shell      Executes a shell inside the application container. Useful for running customized commands. Requires the application to be UP.
  tests      Executes the unitary tests from the application. Requires the application to be UP.
  clean      Delete the directories auto generated when compiling the application
  help       Prints this help
"
}

CMD="$1"
ARGS=${@:2}

COMPOSE_FILE="docker/docker-compose.dev.yml"

set -e

_retrieve_build_files() {
    set +e

    [ -f install/setup.sh ] \
      || sudo docker-compose -f $COMPOSE_FILE run \
        --rm \
        --entrypoint='' \
        fusion_layer \
        bash -c "cp -aT /opt/install /ros2_ws/install \
         && cp -aT /opt/build /ros2_ws/build \
         && cp -aT /opt/log /ros2_ws/log"
}

build() {
    echo "Building the application..."
    sudo docker-compose -f $COMPOSE_FILE build $ARGS
}

up() {
    echo "Bringing the application up..."
    _retrieve_build_files
    sudo docker-compose -f $COMPOSE_FILE up $ARGS
}

down() {
    echo "Bringing the application down..."
    sudo docker-compose -f $COMPOSE_FILE down $ARGS
}

shell() {
    echo "Initializing shell in the container..."
    set +e

    sudo docker-compose -f $COMPOSE_FILE exec fusion_layer /entrypoint.sh bash $ARGS \
        || echo -e "\nSome error happened. Was the application UP when you tried to run the command?" \
        && exit 1
}

compile() {
    echo "Initializing shell in the container..."

    sudo docker-compose -f $COMPOSE_FILE run --rm \
    --entrypoint='' \
    fusion_layer \
    bash -c ". /opt/ros/foxy/setup.sh && colcon build $ARGS"
}

status_() {
    echo "Status of the application containers:"
    sudo docker-compose -f $COMPOSE_FILE ps
}

tests() {
    echo "Running tests..."
    sudo docker-compose -f $COMPOSE_FILE exec fusion_layer \
        /entrypoint.sh colcon test --packages-above fusion_layer --return-code-on-test-failure --event-handlers console_cohesion+ $ARGS
}

tests_no_tty() {
    echo "Running tests..."
    sudo docker-compose -f $COMPOSE_FILE exec -T fusion_layer \
        /entrypoint.sh colcon test --packages-above fusion_layer --return-code-on-test-failure --event-handlers console_cohesion+ $ARGS
}

clean() {
    echo "Cleaning generated files"
    sudo rm -rf build log install
}


case $CMD in
  "")
    echo "No command specified, assuming 'up'..."
    up
  ;;
  build)
    build
  ;;
  up)
    up
  ;;
  down)
    down
  ;;
  status)
    status_
  ;;
  shell)
    shell
  ;;
  compile)
    compile
  ;;
  tests)
    tests
  ;;
  help)
    help_
  ;;
  clean)
    clean
  ;;
  tests_no_tty)
    tests_no_tty
  ;;
  *)
    echo "Unknown command $1!"
    exit 1
  ;;
esac
